#include <fstream>
#include <string>
#include "player.h"
#include "StringTools.h"

player::player(std::string &line)
{
    auto splitline = SplitString(line, "\t");
    int i = 0;
    m_birthdate = std::stoi(splitline[i]);
    i++;
    m_playerjointeamdate = std::stoi(splitline[i]);
    i++;
    m_shoetypecode = std::stoi(splitline[i]);
    i++;
    m_haircolorcode = std::stoi(splitline[i]);
    i++;
    m_facialhairtypecode = std::stoi(splitline[i]);
    i++;
    m_curve = std::stoi(splitline[i]);
    i++;
    m_jerseystylecode = std::stoi(splitline[i]);
    i++;
    m_agility = std::stoi(splitline[i]);
    i++;
    m_accessorycode4 = std::stoi(splitline[i]);
    i++;
    m_gksavetype = std::stoi(splitline[i]);
    i++;
    m_positioning = std::stoi(splitline[i]);
    i++;
    m_hairtypecode = std::stoi(splitline[i]);
    i++;
    m_standingtackle = std::stoi(splitline[i]);
    i++;
    m_faceposercode = std::stoi(splitline[i]);
    i++;
    m_preferredposition3 = std::stoi(splitline[i]);
    i++;
    m_longpassing = std::stoi(splitline[i]);
    i++;
    m_penalties = std::stoi(splitline[i]);
    i++;
    m_animfreekickstartposcode = std::stoi(splitline[i]);
    i++;
    m_animpenaltieskickstylecode = std::stoi(splitline[i]);
    i++;
    m_isretiring = std::stoi(splitline[i]);
    i++;
    m_longshots = std::stoi(splitline[i]);
    i++;
    m_gkdiving = std::stoi(splitline[i]);
    i++;
    m_interceptions = std::stoi(splitline[i]);
    i++;
    m_shoecolorcode2 = std::stoi(splitline[i]);
    i++;
    m_crossing = std::stoi(splitline[i]);
    i++;
    m_potential = std::stoi(splitline[i]);
    i++;
    m_gkreflexes = std::stoi(splitline[i]);
    i++;
    m_finishingcode1 = std::stoi(splitline[i]);
    i++;
    m_reactions = std::stoi(splitline[i]);
    i++;
    m_vision = std::stoi(splitline[i]);
    i++;
    m_contractvaliduntil = std::stoi(splitline[i]);
    i++;
    m_finishing = std::stoi(splitline[i]);
    i++;
    m_dribbling = std::stoi(splitline[i]);
    i++;
    m_slidingtackle = std::stoi(splitline[i]);
    i++;
    m_accessorycode3 = std::stoi(splitline[i]);
    i++;
    m_accessorycolourcode1 = std::stoi(splitline[i]);
    i++;
    m_headtypecode = std::stoi(splitline[i]);
    i++;
    m_firstnameid = std::stoi(splitline[i]);
    i++;
    m_sprintspeed = std::stoi(splitline[i]);
    i++;
    m_height = std::stoi(splitline[i]);
    i++;
    m_hasseasonaljersey = std::stoi(splitline[i]);
    i++;
    m_preferredposition2 = std::stoi(splitline[i]);
    i++;
    m_strength = std::stoi(splitline[i]);
    i++;
    m_preferredposition1 = std::stoi(splitline[i]);
    i++;
    m_ballcontrol = std::stoi(splitline[i]);
    i++;
    m_shotpower = std::stoi(splitline[i]);
    i++;
    m_trait1 = std::stoi(splitline[i]);
    i++;
    m_socklengthcode = std::stoi(splitline[i]);
    i++;
    m_weight = std::stoi(splitline[i]);
    i++;
    m_hashighqualityhead = std::stoi(splitline[i]);
    i++;
    m_gkglovetypecode = std::stoi(splitline[i]);
    i++;
    m_balance = std::stoi(splitline[i]);
    i++;
    m_gkkicking = std::stoi(splitline[i]);
    i++;
    m_lastnameid = std::stoi(splitline[i]);
    i++;
    m_internationalrep = std::stoi(splitline[i]);
    i++;
    m_animpenaltiesmotionstylecode = std::stoi(splitline[i]);
    i++;
    m_shortpassing = std::stoi(splitline[i]);
    i++;
    m_freekickaccuracy = std::stoi(splitline[i]);
    i++;
    m_skillmoves = std::stoi(splitline[i]);
    i++;
    m_usercaneditname = std::stoi(splitline[i]);
    i++;
    m_attackingworkrate = std::stoi(splitline[i]);
    i++;
    m_finishingcode2 = std::stoi(splitline[i]);
    i++;
    m_aggression = std::stoi(splitline[i]);
    i++;
    m_acceleration = std::stoi(splitline[i]);
    i++;
    m_headingaccuracy = std::stoi(splitline[i]);
    i++;
    m_eyebrowcode = std::stoi(splitline[i]);
    i++;
    m_runningcode2 = std::stoi(splitline[i]);
    i++;
    m_gkhandling = std::stoi(splitline[i]);
    i++;
    m_eyecolorcode = std::stoi(splitline[i]);
    i++;
    m_jerseysleevelengthcode = std::stoi(splitline[i]);
    i++;
    m_accessorycolourcode3 = std::stoi(splitline[i]);
    i++;
    m_accessorycode1 = std::stoi(splitline[i]);
    i++;
    m_headclasscode = std::stoi(splitline[i]);
    i++;
    m_defensiveworkrate = std::stoi(splitline[i]);
    i++;
    m_nationality = std::stoi(splitline[i]);
    i++;
    m_preferredfoot = std::stoi(splitline[i]);
    i++;
    m_sideburnscode = std::stoi(splitline[i]);
    i++;
    m_weakfootabilitytypecode = std::stoi(splitline[i]);
    i++;
    m_jumping = std::stoi(splitline[i]);
    i++;
    m_skintypecode = std::stoi(splitline[i]);
    i++;
    m_gkkickstyle = std::stoi(splitline[i]);
    i++;
    m_stamina = std::stoi(splitline[i]);
    i++;
    m_playerid = std::stoi(splitline[i]);
    i++;
    m_marking = std::stoi(splitline[i]);
    i++;
    m_accessorycolourcode4 = std::stoi(splitline[i]);
    i++;
    m_gkpositioning = std::stoi(splitline[i]);
    i++;
    m_trait2 = std::stoi(splitline[i]);
    i++;
    m_skintonecode = std::stoi(splitline[i]);
    i++;
    m_shortstyle = std::stoi(splitline[i]);
    i++;
    m_overallrating = std::stoi(splitline[i]);
    i++;
    m_jerseyfit = std::stoi(splitline[i]);
    i++;
    m_accessorycode2 = std::stoi(splitline[i]);
    i++;
    m_shoedesigncode = std::stoi(splitline[i]);
    i++;
    m_playerjerseynameid = std::stoi(splitline[i]);
    i++;
    m_shoecolorcode1 = std::stoi(splitline[i]);
    i++;
    m_commonnameid = std::stoi(splitline[i]);
    i++;
    m_bodytypecode = std::stoi(splitline[i]);
    i++;
    m_animpenaltiesstartposcode = std::stoi(splitline[i]);
    i++;
    m_runningcode1 = std::stoi(splitline[i]);
    i++;
    m_preferredposition4 = std::stoi(splitline[i]);
    i++;
    m_volleys = std::stoi(splitline[i]);
    i++;
    m_accessorycolourcode2 = std::stoi(splitline[i]);
    i++;
    m_facialhaircolorcode = std::stoi(splitline[i]);
    i++;
}

unsigned int player::GetRoughPosition()
{
    if (m_preferredposition1 == 0)
        return GK;
    else if (m_preferredposition1 >= 1 && m_preferredposition1 <= 8)
        return DF;
    else if (m_preferredposition1 >= 9 && m_preferredposition1 <= 19)
        return MF;
    else
        return FW;
}